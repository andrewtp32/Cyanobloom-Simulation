<?xml version="1.0"?>
<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" value="false"/>
  <arg name="use_sim_time" value="true"/>
  <arg name="gui" default="false"/>
  <arg name="headless" value="false"/>
  <arg name="debug" value="false"/>
  <arg name="world_name" default="$(find cyanobloom_simulation)/worlds/YawgoogPond.world"/> 
  <arg name="namespace" default="wamv"/>  <!-- namespace for the USV -->
 
  
  <!-- launch the custom world  -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" >
        <arg name="paused" value="True"/>
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="verbose" value="True"/>
  </include>


  <!-- \\\\\ TO INCLUDE THE USV ///// -->
   
  <!-- Initial USV location and attitude. This pose starts to USV in Yawgoog Pond -->
  <arg name="x" default="-150" />   
  <arg name="y" default="-100" />   
  <arg name="z" default="0.5" />  
  <arg name="P" default="0" />     
  <arg name="R" default="0" />     
  <arg name="Y" default="0" />  

  <!-- I'm not sure what the actualy purpose of this section is for, but it's needed for the USV to work so it will be included... -->
  <arg name="non_competition_mode" default="true"/>
  <arg name="enable_ros_network" value="$(arg non_competition_mode)"/>
  <env name="VRX_DEBUG" value="$(arg non_competition_mode)"/>
  <env unless="$(arg non_competition_mode)" name="GAZEBO_MODEL_PATH" value="$(find vrx_gazebo)/models:$(find wamv_gazebo)/models:$(find wamv_description)/models:$(optenv GAZEBO_MODEL_PATH)"/> 
 
  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration -->
  <arg name="thrust_config" default="H" />

  <!-- Do you want to enable sensors? -->
  <arg name="camera_enabled"       default="false" />
  <arg name="gps_enabled"          default="true" />
  <arg name="imu_enabled"          default="false" />
  <arg name="lidar_enabled"        default="false" />
  <arg name="ground_truth_enabled" default="false" />

  <!-- Load robot model -->
  <arg name="urdf" default="$(find cyanobloom_simulation)/urdf/wamv_gazebo.urdf.xacro"/>
  <param name="$(arg namespace)/robot_description"
        command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
        thruster_config:=$(arg thrust_config)
        camera_enabled:=$(arg camera_enabled)
        gps_enabled:=$(arg gps_enabled)
        imu_enabled:=$(arg imu_enabled)
        lidar_enabled:=$(arg lidar_enabled)
        ground_truth_enabled:=$(arg ground_truth_enabled)
        namespace:=$(arg namespace) "/>

  <!-- Spawn model in Gazebo, script depending on non_competition_mode --> 
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" if="$(arg non_competition_mode)"
        args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param $(arg namespace)/robot_description -model wamv"/>

  <node name="spawn_wamv" pkg="vrx_gazebo" type="spawn_wamv.bash" unless="$(arg non_competition_mode)"
        args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              --urdf $(arg urdf) --model wamv"/>

  <!-- This launches the keyboard controller, the bloom drawing script, the camera image viewer, the script that moves the drone to a specific location, and the bloom finder node, respecfully -->
  <node name="drone_keyboard" pkg="cyanobloom_simulation" type="drone_keyboard"/>
  <node name="drone_camera_AR" pkg="cyanobloom_simulation" type="drone_camera_AR.py" />
  <node name="rqt_image_view" pkg="rqt_image_view" type="rqt_image_view"/>
<<<<<<< HEAD
  <node name="drone_command_velocities" pkg="cyanobloom_simulation" type="drone_command_velocities.py"/>
  <node name="bloom_finder" pkg="cyanobloom_simulation" type="bloom_finder.py"/>
  <node name="bloom_normal_distribution" pkg="cyanobloom_simulation" type="bloom_normal_distribution.py"/>

  <!-- From Thivanka - reads the outside text file containing lat/lon locations of the blooms -->
  <param name="readfile/topic_name" type="string" value="particle_list_for_gazebo" />
  <param name="readfile/file_path" type="string" value="$(find cyanob_phd_filter)results/coordinates.txt" />
  <!--node to read external files/-->
  <node name="External_file_node" pkg="cyanob_phd_filter"  type="particle_list_publisher_node" />
=======
  <!--<node name="drone_move_to_location" pkg="cyanobloom_simulation" type="drone_move_to_location.py"/>-->
  <node name="bloom_finder" pkg="cyanobloom_simulation" type="bloom_finder.py" />
  <!--<node name="bloom_normal_distribution" pkg="cyanobloom_simulation" type="bloom_normal_distribution.py"/>-->
>>>>>>> 660120c29ad069661f05f283b0f49dfd4d8dc383

  <!-- From Thivanka - reads the outside text file containing lat/lon locations of the blooms
  REMOVED and moved into Parallel_filter.Launch
  <include file="$(find cyanob_phd_filter)/launch/gazebo_blooms_publisher.launch"  />
  -->
</launch>
